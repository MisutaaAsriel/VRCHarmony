# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build Package

on:
  workflow_dispatch:
    inputs:
      release:
        required: true
        type: boolean
        default: false
      reason:
        required: true
        type: string
        default: "Manual Build"

run-name: ${{ inputs.reason }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: true
    
    outputs:
      commitHash: ${{ steps.hash.outputs.commitHash }}
      version: ${{ steps.version.outputs.version }}
    
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[publish-gh]') || contains(github.event.head_commit.message, '[build-gh]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
        fetch-depth: 0

    - name: Identify Build
      id: hash
      run: echo "commitHash=$(git rev-parse HEAD | cut -c1-9)" >> $GITHUB_OUTPUT

    - name: Get Package Version
      id: version
      working-directory: ${{ github.workspace }}
      run: |
        version=$(awk -F'[<>]' '/<HarmonyVersion>/ {print $3}' ./Sources/Harmony/Directory.Build.props)
        echo "version=${version%.*}+${version##*.}.$(git log --oneline | awk 'END {print NR}').${{ github.run_number }}" >> $GITHUB_OUTPUT
        echo "short_version=$version" >> $GITHUB_ENV

    - name: Set Package Version
      uses: restackio/update-json-file-action@2.1
      with:
        file: ${{ github.workspace }}/Packages/dev.pardeike.harmony/package.json
        fields: "{\"version\": \"${{ steps.version.outputs.version }}\"}"
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        global-json-file: Sources/Harmony/global.json

    - name: Restore dependencies
      working-directory: ${{ github.workspace }}/Sources/Harmony
      run: dotnet restore
      
    - name: Build
      working-directory: ${{ github.workspace }}/Sources/Harmony
      run: |
        dotnet sln remove Lib.Harmony.Ref/Lib.Harmony.Ref.csproj
        dotnet build -c:release -f:net452

    - name: Package Assembly
      working-directory: ${{ github.workspace }}
      run: |
        mkdir ./Artifacts
        cp ./Sources/Harmony/Lib.Harmony/bin/Release/net452/0Harmony.dll ./Artifacts/
        cp ./Sources/Harmony/Lib.Harmony/bin/Release/net452/0Harmony.dll ./Packages/dev.pardeike.harmony/Plugins/Harmony/
        cd ./Packages/dev.pardeike.harmony
        zip -r "${{ github.workspace }}/Artifacts/dev.pardeike.harmony-${{ env.short_version }}.zip" .

    - name: Upload Community Package
      uses: actions/upload-artifact@v4.6.2
      with:
        name: Harmony-VCC-Community-Release-${{ env.short_version }}-${{ steps.hash.outputs.commitHash }}
        path: ${{ github.workspace }}/Artifacts/dev.pardeike.harmony-${{ env.short_version }}.zip
        if-no-files-found: error
        retention-days: 60

    - name: Upload Harmony Library
      uses: actions/upload-artifact@v4.6.2
      with:
        name: 0Harmony-DebugFat-AnyCPU-net452-${{ env.short_version }}-${{ steps.hash.outputs.commitHash }}
        path: ${{ github.workspace }}/Artifacts/0Harmony.dll
        if-no-files-found: error
        retention-days: 60

  Release:
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.event_name == 'workflow_dispatch' && inputs.release) || (github.event_name == 'push' && contains(github.ref, 'refs/tags/') && !contains(github.event.head_commit.message, '[skip-gh]')) || contains(github.event.head_commit.message, '[publish-gh]')
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v5

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: false
          tag_name: ${{ needs.build.outputs.version }}
          name: "Harmony ${{ needs.build.outputs.version }} (${{ needs.build.outputs.commitHash }})"
          files: |
            ${{ github.workspace }}/**/*.zip
            ${{ github.workspace }}/**/*.dll
